// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name   String
  phone  String? @unique
  email  String? @unique
  avatar String  @default("157abaf4-5fb6-4181-afc0-37ea08b6ae00")

  tokens          Token[]
  items           Item[]
  favorites       Favorite[]
  posts           Post[]
  answers         Answer[]
  wonderings      Wondering[]
  streams         Stream[]
  writtenReviews  Review[]      @relation(name: "writtenReviews")
  receivedReviews Review[]      @relation(name: "receivedReviews")
  selledItems     Transaction[] @relation(name: "selledItems")
  boughtItems     Transaction[] @relation(name: "boughtItems")
  messages        Message[]
}

model Token {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  payload String @unique

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  @@index([userId])
}

model Item {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  imageUrl    String
  price       Int
  name        String
  description String @db.MediumText

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  favorites   Favorite[]
  transaction Transaction[]

  @@index([userId])
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question String @db.MediumText

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  answers    Answer[]
  wonderings Wondering[]

  @@index([userId])
}

model Answer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  answer String @db.MediumText

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  @@index([userId])
  @@index([postId])
}

model Wondering {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  @@index([userId])
  @@index([postId])
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  review String @db.MediumText
  score  Int    @default(3)

  reviewedBy   User @relation(fields: [reviewedById], references: [id], onDelete: Cascade, name: "writtenReviews")
  reviewedById Int

  reviewedFor   User @relation(fields: [reviewedForId], references: [id], onDelete: Cascade, name: "receivedReviews")
  reviewedForId Int

  @@index([reviewedForId])
  @@index([reviewedById])
}

model Favorite {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  item   Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId Int

  @@index([userId])
  @@index([itemId])
}

model Transaction {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  buyer   User @relation(fields: [buyerId], references: [id], onDelete: NoAction, name: "boughtItems")
  buyerId Int

  seller   User @relation(fields: [sellerId], references: [id], onDelete: NoAction, name: "selledItems")
  sellerId Int

  item   Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId Int

  @@index([buyerId])
  @@index([sellerId])
  @@index([itemId])
}

model Stream {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String @db.MediumText

  messages Message[]

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  @@index([userId])
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  message String @db.MediumText

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  stream   Stream @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId Int

  @@index([userId])
  @@index([streamId])
}
